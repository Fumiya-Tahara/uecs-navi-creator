"""recreated databases

Revision ID: b1e844a5576c
Revises: 315a632aabde
Create Date: 2024-01-14 04:31:47.135174

"""
from typing import Sequence, Union

from sqlalchemy import inspect
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'b1e844a5576c'
down_revision: Union[str, None] = '315a632aabde'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('block_a',
        sa.Column('uecsid', mysql.INTEGER(), autoincrement=True, nullable=False),
        # sa.Column('uecsid', mysql.INTEGER(), nullable=True),
        sa.Column('macaddr', mysql.TINYBLOB(), nullable=True),
        sa.Column('fix_dhcp_flag', mysql.TINYBLOB(), nullable=True),
        sa.Column('fixed_ipaddress', mysql.TINYBLOB(), nullable=True),
        sa.Column('fixed_netmask', mysql.TINYBLOB(), nullable=True),
        sa.Column('fixed_defgw', mysql.TINYBLOB(), nullable=True),
        sa.Column('fixed_dns', mysql.TINYBLOB(), nullable=True),
        sa.Column('vender_name', mysql.VARCHAR(length=16), nullable=True),
        sa.Column('node_name', mysql.VARCHAR(length=16), nullable=True),
        sa.PrimaryKeyConstraint('uecsid'),
        mysql_collate='utf8mb4_0900_ai_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    
        

        # Block B テーブル
    op.create_table(
        'block_b',
        sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
        sa.Column('block_a_id', sa.Integer(), sa.ForeignKey('block_a.uecsid')),
        sa.Column('valid', sa.SmallInteger()),
        sa.Column('room', sa.SmallInteger()),
        sa.Column('region', sa.LargeBinary()),
        sa.Column('order', sa.Integer()),
        sa.Column('priority', sa.SmallInteger()),
        sa.Column('lv', sa.Integer()),
        sa.Column('cast', sa.SmallInteger()),
        sa.Column('sr', sa.String(length=50)),  # 長さを指定
        sa.Column('ccm_type', sa.String(length=20)),
        sa.Column('unit', sa.String(length=10)),
        sa.Column('sthr', sa.Integer()),
        sa.Column('stmn', sa.Integer()),
        sa.Column('edhr', sa.Integer()),
        sa.Column('edmn', sa.Integer()),
        sa.Column('inmn', sa.Integer()),
        sa.Column('dumn', sa.Integer()),
        sa.Column('rly_l', sa.SmallInteger()),
        sa.Column('rly_h', sa.SmallInteger()),
    )

    # Block C テーブル
    op.create_table(
        'block_c',
        sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
        sa.Column('block_a_id', sa.Integer(), sa.ForeignKey('block_a.uecsid')),
        sa.Column('valid', sa.SmallInteger()),
        sa.Column('room', sa.SmallInteger()),
        sa.Column('region', sa.LargeBinary()),
        sa.Column('order', sa.Integer()),
        sa.Column('priority', sa.SmallInteger()),
        sa.Column('lv', sa.Integer()),
        sa.Column('cast', sa.SmallInteger()),
        sa.Column('sr', sa.String(length=50)),  # 長さを指定
        sa.Column('ccm_type', sa.String(length=20)),
        sa.Column('unit', sa.String(length=10)),
        sa.Column('sthr', sa.Integer()),
        sa.Column('stmn', sa.Integer()),
        sa.Column('edhr', sa.Integer()),
        sa.Column('edmn', sa.Integer()),
        sa.Column('inmn', sa.Integer()),
        sa.Column('dumn', sa.Integer()),
        sa.Column('rly_l', sa.SmallInteger()),
        sa.Column('rly_h', sa.SmallInteger()),
    )

    op.create_table(
            'block_d',
            sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column('block_a_id', sa.Integer(), sa.ForeignKey('block_a.uecsid')),
            sa.Column('valid', sa.SmallInteger()),
            sa.Column('room', sa.SmallInteger()),
            sa.Column('region', sa.LargeBinary()),
            sa.Column('order', sa.Integer()),
            sa.Column('priority', sa.SmallInteger()),
            sa.Column('ccm_type', sa.String(length=20)),
            sa.Column('cmpope', sa.LargeBinary()),
            sa.Column('fval', sa.Float())
        )
    
    op.create_table(
        sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
        sa.Column('block_a_id', sa.Integer(), sa.ForeignKey('block_a.uecsid')),
        sa.Column('valid', sa.SmallInteger()),
        sa.Column('room', sa.SmallInteger()),
        sa.Column('region', sa.LargeBinary()),
        sa.Column('order', sa.Integer()),
        sa.Column('priority', sa.SmallInteger()),
        sa.Column('lv', sa.Integer()),
        sa.Column('cast', sa.SmallInteger()),
        sa.Column('sr', sa.String(length=50)),  # 長さを指定
        sa.Column('ccm_type', sa.String(length=20)),
        sa.Column('unit', sa.String(length=10)),
        sa.Column('sthr', sa.Integer()),
        sa.Column('stmn', sa.Integer()),
        sa.Column('edhr', sa.Integer()),
        sa.Column('edmn', sa.Integer()),
        sa.Column('inmn', sa.Integer()),
        sa.Column('dumn', sa.Integer()),
        sa.Column('rly_l', sa.SmallInteger()),
        sa.Column('rly_h', sa.SmallInteger()),
    )
        

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('blocks')
    op.drop_table('block_b')
    op.drop_table('block_c')
    op.drop_table('block_d')
    op.drop_table('block_a')
